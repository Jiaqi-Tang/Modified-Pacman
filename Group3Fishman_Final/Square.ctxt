#BlueJ class context
comment0.target=Square
comment0.text=\r\n\ Represents\ a\ square\ on\ the\ maze.\ Can\ be\ road,\ ice,\ or\ wall,\ or\ the\ home\ square\ of\ the\ Blob.\r\n\ \r\n\ @Katelyn\ Lam\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=index\ mazeX\ mazeY
comment1.target=Square(int,\ int,\ int)
comment1.text=\r\n\ Constructor\ -\ sets\ Square\ to\ appropriate\ image,\ saves\ location\ relative\ to\ the\ Maze,\ and\ initializes\ identifier\ \r\n\ @param\ index\ Identifier\ for\ the\ type\ of\ Square\ in\ the\ Maze.\ The\ player\ can\ move\ on\ the\ types\ with\ index\ 1\ or\ 2\ and\r\n\ not\ on\ 0\ or\ 3.\r\n\ @param\ mazeX\ index\ <code>i</code>\ for\ the\ 2D\ array\ of\ <code>Square</code>\ representing\ the\ maze\ in\ <code>Maze</code>\r\n\ @param\ mazeY\ index\ <code>j</code>\ for\ the\ 2D\ array\ of\ <code>Square</code>\ representing\ the\ maze\ in\ <code>Maze</code>\r\n
comment2.params=
comment2.target=int\ getIndex()
comment2.text=\r\n\ Gets\ the\ identifier\ for\ type\ of\ Square\r\n\ @return\ int\ -\ index\ the\ Square\ is\ represented\ by\:\ 0\ -\ Wall,\ 1\ -\ Road,\ 2\ -\ Ice,\ 3\ -\ Home\ base\ for\ Blob\r\n
comment3.params=
comment3.target=int\ getSquareWidth()
comment3.text=\r\n\ Gets\ the\ width\ of\ the\ <code>Square</code>,\ which\ is\ based\ on\ the\ width\ of\ the\ image\r\n\ which\ it\ is\ represented\ by,\ in\ pixels.\r\n\ @return\ int\ -\ width\ of\ the\ image\ of\ the\ <code>Square</code>,\ should\ be\ 25px.\r\n
comment4.params=crumb
comment4.target=void\ setCrumbInSquare(Crumb)
comment4.text=\r\n\ Adds\ a\ <code>Crumb</code>\ to\ the\ <code>Square</code>\ in\ the\ <code>Maze</code>\r\n\ @param\ crumb\ A\ <code>Crumb</code>\ object\ that\ can\ be\ eaten\ by\ the\ <code>Player</code>\r\n
comment5.params=
comment5.target=int[]\ squareInMazeLoc()
comment5.text=\r\n\ Gets\ the\ location\ of\ the\ Square\ in\ terms\ of\ the\ <code>Maze</code>\r\n\ @return\ int[]\ -\ an\ array\ of\ length\ 2\ indicating\ the\ location\ of\ the\ <code>Square</code>\ \r\n\ relative\ to\ the\ <code>Maze</code>\r\n
comment6.params=
comment6.target=int\ getCrumbType()
comment6.text=\r\n\ Returns\ the\ type\ of\ <code>Crumb</code>\ that\ is\ on\ the\ <code>Square</code>,\r\n\ by\ returning\ its\ index\:\ 0\ -\ regular,\ 1\ -\ special\ (makes\ ghosts\ edible),\ 3\ -\ cherries,\ 4\ -\ cake.\r\n\ @return\ int\ -\ index\ that\ identifies\ <code>Crumb</code>.\ \r\n\ Returns\ -1\ if\ there\ is\ no\ <code>Crumb</code>\ on\ that\ <code>Square</code>.\r\n
comment7.params=index
comment7.target=void\ changeCrumb(int)
comment7.text=\r\n\ Changes\ the\ <code>Crumb</code>\ on\ the\ <code>Square</code>.\ Ensures\ that\ the\ <code>Maze</code>\ class\ cannot\r\n\ access\ the\ <code>Crumb</code>\ object\ on\ the\ <code>Square</code>\ directly.\r\n\ @param\ index\ an\ identifier\ for\ the\ the\ type\ of\ <code>Crumb<code>\ the\ <code>Crumb</code>\ on\ the\ <code>Square</code>\ changes\ to.\r\n\ Identified\ by\:\ 0\ -\ regular,\ 1\ -\ special\ (makes\ enemies\ edible),\ 2\ -\ cherries,\ 3\ -\ cake\ \r\n
comment8.params=
comment8.target=boolean\ checkCrumbInMaze()
comment8.text=\r\n\ Checks\ if\ the\ crumb\ on\ the\ <code>Square</code>\ is\ in\ the\ <code>Maze</code>\r\n\ @return\ boolean\ -\ <code>true</code>\ if\ the\ <code>Crumb</code>\ is\ in\ the\ <code>Maze</code>;\r\n\ <code>false</code>\ otherwise\r\n
numComments=9
